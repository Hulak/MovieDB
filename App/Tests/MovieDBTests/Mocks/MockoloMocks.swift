///
/// @Generated by Mockolo
///

import Combine
import Foundation
import MDBCommonUI
import MDBComponents
import MDBConstants
import MDBDataLayer
import MDBMain
import MDBNetworking
import MDBServices
import MDBUtilities
import NeedleFoundation
import UIKit

public class AppRoutingCalculatorProtocolMock: AppRoutingCalculatorProtocol {
  public init() {}

  public private(set) var directRouteCallCount = 0
  public var directRouteHandler: ((DeepLinks?) -> (DeepLinks))?
  public func directRoute(_ route: DeepLinks?) -> DeepLinks {
    directRouteCallCount += 1
    if let directRouteHandler = directRouteHandler {
      return directRouteHandler(route)
    }
    fatalError("directRouteHandler returns can't have a default value thus its handler must be set")
  }

  public private(set) var nextAfterCallCount = 0
  public var nextAfterHandler: ((DeepLinks?) -> (AnyPublisher<DeepLinks, Never>))?
  public func nextAfter(_ route: DeepLinks?) -> AnyPublisher<DeepLinks, Never> {
    nextAfterCallCount += 1
    if let nextAfterHandler = nextAfterHandler {
      return nextAfterHandler(route)
    }
    fatalError("nextAfterHandler returns can't have a default value thus its handler must be set")
  }

  public private(set) var createOptionCallCount = 0
  public var createOptionHandler: ((ModuleOutputModelProtocol?) -> (DeepLinks?))?
  public func createOption(from output: ModuleOutputModelProtocol?) -> DeepLinks? {
    createOptionCallCount += 1
    if let createOptionHandler = createOptionHandler {
      return createOptionHandler(output)
    }
    return nil
  }
}

public class AppInteractorProtocolMock: AppInteractorProtocol {
  public init() {}

  public var reachabilityPublisher: AnyPublisher<Bool, Never> { reachabilityPublisherSubject.eraseToAnyPublisher() }
  public private(set) var reachabilityPublisherSubject = PassthroughSubject<Bool, Never>()

  public var applicationStatePublisher: AnyPublisher<ApplicationStateChanges, Never> { applicationStatePublisherSubject.eraseToAnyPublisher() }
  public private(set) var applicationStatePublisherSubject = PassthroughSubject<ApplicationStateChanges, Never>()

  public private(set) var initialSetupCallCount = 0
  public var initialSetupHandler: (() -> Void)?
  public func initialSetup() {
    initialSetupCallCount += 1
    if let initialSetupHandler = initialSetupHandler {
      initialSetupHandler()
    }
  }
}

class AppDependencyMock: AppDependency {
  init() {}
  init(
    databaseService: DatabaseServiceProtocol,
    networkingProvider: NetworkingProviderProtocol,
    userDefaults: UserDefaultsProtocol,
    themeManager: ThemeManagerProtocol,
    localizer: LocalizerProtocol
  ) {
    _databaseService = databaseService
    _networkingProvider = networkingProvider
    _userDefaults = userDefaults
    _themeManager = themeManager
    _localizer = localizer
  }

  private(set) var databaseServiceSetCallCount = 0
  private var _databaseService: DatabaseServiceProtocol! { didSet { databaseServiceSetCallCount += 1 } }
  var databaseService: DatabaseServiceProtocol {
    get { _databaseService }
    set { _databaseService = newValue }
  }

  private(set) var networkingProviderSetCallCount = 0
  private var _networkingProvider: NetworkingProviderProtocol! { didSet { networkingProviderSetCallCount += 1 } }
  var networkingProvider: NetworkingProviderProtocol {
    get { _networkingProvider }
    set { _networkingProvider = newValue }
  }

  private(set) var userDefaultsSetCallCount = 0
  private var _userDefaults: UserDefaultsProtocol! { didSet { userDefaultsSetCallCount += 1 } }
  var userDefaults: UserDefaultsProtocol {
    get { _userDefaults }
    set { _userDefaults = newValue }
  }

  private(set) var themeManagerSetCallCount = 0
  private var _themeManager: ThemeManagerProtocol! { didSet { themeManagerSetCallCount += 1 } }
  var themeManager: ThemeManagerProtocol {
    get { _themeManager }
    set { _themeManager = newValue }
  }

  private(set) var localizerSetCallCount = 0
  private var _localizer: LocalizerProtocol! { didSet { localizerSetCallCount += 1 } }
  var localizer: LocalizerProtocol {
    get { _localizer }
    set { _localizer = newValue }
  }
}

public class AppCoordinatorBuilderMock: AppCoordinatorBuilder {
  public init() {}
  public init(rootRouter: CoordinatorRouterProtocol, appInteractor: AppInteractorProtocol = AppInteractorProtocolMock()) {
    _rootRouter = rootRouter
    self.appInteractor = appInteractor
  }

  public private(set) var rootRouterSetCallCount = 0
  private var _rootRouter: CoordinatorRouterProtocol! { didSet { rootRouterSetCallCount += 1 } }
  public var rootRouter: CoordinatorRouterProtocol {
    get { _rootRouter }
    set { _rootRouter = newValue }
  }

  public private(set) var appInteractorSetCallCount = 0
  public var appInteractor: AppInteractorProtocol = AppInteractorProtocolMock() { didSet { appInteractorSetCallCount += 1 } }

  public private(set) var routingCalculatorCallCount = 0
  public var routingCalculatorHandler: (() -> (AppRoutingCalculatorProtocol))?
  public func routingCalculator() -> AppRoutingCalculatorProtocol {
    routingCalculatorCallCount += 1
    if let routingCalculatorHandler = routingCalculatorHandler {
      return routingCalculatorHandler()
    }
    return AppRoutingCalculatorProtocolMock()
  }

  public private(set) var mainCoordinatorCallCount = 0
  public var mainCoordinatorHandler: ((MainFlowRoutingExitHandler) -> (MainFlowCoordinatorProtocol))?
  public func mainCoordinator(exitPoint: MainFlowRoutingExitHandler) -> MainFlowCoordinatorProtocol {
    mainCoordinatorCallCount += 1
    if let mainCoordinatorHandler = mainCoordinatorHandler {
      return mainCoordinatorHandler(exitPoint)
    }
    fatalError("mainCoordinatorHandler returns can't have a default value thus its handler must be set")
  }
}
